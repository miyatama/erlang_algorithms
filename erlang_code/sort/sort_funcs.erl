% c(sort_funcs).
-module(sort_funcs).

-export([get_sort_list/1,
  show_list/1,
  compare/2,
  sort_test/2,
  swap/3,
  output_debug/1,
  output_debug/2,
  output_debug/3,
  output_info/1,
  output_info/2,
  output_info/3]).

-record(item, {sort_value}).

% 1: DEBUG
% 2: INFO
% 3: WARN
% 4: ERROR
% 5: FATAL
-define(LOG_LEVEL, 1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% public function
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
get_sort_list(3) ->
  [
    #item{sort_value=3} ,
    #item{sort_value=2} ,
    #item{sort_value=1}
  ];
get_sort_list(N) ->
  get_sort_list([], N).
get_sort_list(L, 0) ->
  L;
get_sort_list(L, N) ->
  L1 = [#item{sort_value=rand:uniform(100)} | L],
  get_sort_list(L1, N - 1).

show_list(L) ->
  io:fwrite("list :"),
  [H|T] = L,
  show_list(H, T).
show_list(H, []) ->
  #item{sort_value=Value} = H,
  io:fwrite("~w~n", [Value]),
  ok;
show_list(H, T) ->
  #item{sort_value=Value} = H,
  io:fwrite("~w, ", [Value]),
  [H2|T2] = T,
  show_list(H2, T2).

compare(#item{sort_value=Avalue}, #item{sort_value=Bvalue}) when Avalue > Bvalue ->
  greater_than;
compare(#item{sort_value=Avalue}, #item{sort_value=Bvalue}) when Avalue =:= Bvalue ->
  equal_to;
compare(_, _) ->
  lower_than.

-spec sort_test(atom(), fun((list(T)) -> list(T))) -> true | false.
sort_test(Algorithm, F) ->
  L1 = generate_test_value([1, 2, 3, 4, 5]),
  L1Expect = generate_test_value([1, 2, 3, 4, 5]),
  L1SortResult = F(L1),
  L1TestResult = check_result(L1Expect, L1SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 001 sorted list: ~w", 
    L1TestResult, 
    L1, 
    L1Expect, 
    L1SortResult),
  L2 = generate_test_value([5, 1, 2, 3, 4]),
  L2Expect = generate_test_value([1, 2, 3, 4, 5]),
  L2SortResult = F(L2),
  L2TestResult = check_result(L2Expect, L2SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 002 first to last: ~w", 
    L2TestResult, 
    L2, 
    L2Expect, 
    L2SortResult),
  L3 = generate_test_value([1, 5, 3, 4, 2]),
  L3Expect = generate_test_value([1, 2, 3, 4, 5]),
  L3SortResult = F(L3),
  L3TestResult = check_result(L3Expect, L3SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 003 rough: ~w", 
    L3TestResult, 
    L3, 
    L3Expect, 
    L3SortResult),
  L4 = generate_test_value([5, 1, 3, 2, 4]),
  L4Expect = generate_test_value([1, 2, 3, 4, 5]),
  L4SortResult = F(L4),
  L4TestResult = check_result(L4Expect, L4SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 004 reverse rough: ~w", 
    L4TestResult, 
    L4, 
    L4Expect, 
    L4SortResult),
  L5 = generate_test_value([5, 4, 3, 2, 1]),
  L5Expect = generate_test_value([1, 2, 3, 4, 5]),
  L5SortResult = F(L5),
  L5TestResult = check_result(L5Expect, L5SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 005 desc: ~w", 
    L5TestResult, 
    L5, 
    L5Expect, 
    L5SortResult),
  L6 = generate_test_value([]),
  L6Expect = generate_test_value([]),
  L6SortResult = F(L6),
  L6TestResult = check_result(L6Expect, L6SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 006 empty list: ~w", 
    L6TestResult, 
    L6, 
    L6Expect, 
    L6SortResult),
  L7 = generate_test_value([1]),
  L7Expect = generate_test_value([1]),
  L7SortResult = F(L7),
  L7TestResult = check_result(L7Expect, L7SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 007 one factor: ~w", 
    L7TestResult, 
    L7, 
    L7Expect, 
    L7SortResult),
  L8 = generate_test_value([1, 2]),
  L8Expect = generate_test_value([1, 2]),
  L8SortResult = F(L8),
  L8TestResult = check_result(L8Expect, L8SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 008 two factor: ~w", 
    L8TestResult, 
    L8, 
    L8Expect, 
    L8SortResult),
  L9 = generate_test_value([2, 1]),
  L9Expect = generate_test_value([1, 2]),
  L9SortResult = F(L9),
  L9TestResult = check_result(L9Expect, L9SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 009 two factor reverse: ~w", 
    L9TestResult, 
    L9, 
    L9Expect, 
    L9SortResult),
  L10 = generate_test_value([8, 11, 9, 2, 10, 16]),
  L10Expect = generate_test_value([2, 8, 9, 10, 11, 16]),
  L10SortResult = F(L10),
  L10TestResult = check_result(L10Expect, L10SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 0010 enjoy text book: ~w", 
    L10TestResult, 
    L10, 
    L10Expect, 
    L10SortResult),
  % random 1000 sort
  L11 = generate_test_value(get_random_list()),
  L11Expect = generate_test_value(get_random_sorted_list()),
  L11SortResult = F(L11),
  L11TestResult = check_result(L11Expect, L11SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 0011 random 1000 data: ~w", 
    L11TestResult, 
    L11, 
    L11Expect, 
    L11SortResult),
  % no need sort
  L12Source = get_uniq_value_list(),
  L12 = generate_test_value(L12Source),
  L12Expect = generate_test_value(L12Source),
  L12SortResult = F(L12),
  L12TestResult = check_result(L12Expect, L12SortResult),
  show_check_result(
    Algorithm, 
    "sort_test - case 0012 uniq value list: ~w", 
    L12TestResult, 
    L12, 
    L12Expect, 
    L12SortResult),
  ok.


output_debug(S) ->
  case ?LOG_LEVEL =< 1 of
    true -> 
      io:fwrite("[DEBUG] sort_func: " ++ S ++ "~n");
    false ->
      io:fwrite("")
  end.
output_debug(Module, S) ->
  case ?LOG_LEVEL =< 1 of
    true -> 
      io:fwrite("[DEBUG] " ++ Module ++ ": " ++ S ++ "~n");
    false ->
      io:fwrite("")
  end.
output_debug(Module, S, Args) when is_atom(Module) ->
  output_debug(atom_to_list(Module), S, Args);
output_debug(Module, S, Args) ->
  case ?LOG_LEVEL =< 1 of
    true -> 
      io:fwrite("[DEBUG] " ++ Module ++ ": " ++ S ++ "~n", Args);
    false ->
      io:fwrite("")
  end.

output_info(S) ->
  case ?LOG_LEVEL =< 2 of
    true -> 
      io:fwrite("[INFO] sort_func: " ++ S ++ "~n");
    false ->
      io:fwrite("")
  end.
output_info(Module, S) ->
  case ?LOG_LEVEL =< 2 of
    true -> 
      io:fwrite("[INFO] " ++ Module ++ ": " ++ S ++ "~n");
    false ->
      io:fwrite("")
  end.
output_info(Module, S, Args) when is_atom(Module) ->
  output_info(atom_to_list(Module), S, Args);
output_info(Module, S, Args) ->
  case ?LOG_LEVEL =< 2 of
    true -> 
      io:fwrite("[INFO] " ++ Module ++ ": " ++ S ++ "~n", Args);
    false ->
      io:fwrite("")
  end.

-spec swap(list(T), I, I) -> list(T).
swap(L, null, _) -> L;
swap(L, _, null) -> L;
swap(L, Index, _) when Index =< 0 -> L;
swap(L, Index, _) when Index > length(L) -> L;
swap(L, _, Index) when Index =< 0 -> L;
swap(L, _, Index) when Index > length(L) -> L;
swap(L, Index1, Index2) when is_float(Index1) -> swap(L, trunc(Index1), Index2);
swap(L, Index1, Index2) when is_float(Index2) -> swap(L, Index1, trunc(Index2));
swap(L, Index1, Index2) when Index1 > Index2 -> swap(L, Index2, Index1);
swap(L, Index1, Index2) ->
  Item1 = lists:nth(Index1, L),
  Item2 = lists:nth(Index2, L),
  L1 = lists:append(
    get_swap_head(L, Index1),
    [Item2]),
  L2 = lists:append(
    L1,
    get_swap_middle(L, Index1, Index2)),
  L3 = lists:append(L2, [Item1]),
  lists:append(L3, get_swap_tail(L, Index2)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% private function
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
generate_test_value([]) ->
  [];
generate_test_value(L) ->
  [H|T] = L,
  [ #item{sort_value=H} |
    generate_test_value(T)].

-spec check_result(list(T), list(T)) -> true | false.
check_result(Expect, Result) ->
  ExpectLength = length(Expect),
  ResultLength = length(Result),
  case ExpectLength =:= ResultLength of
    true -> check_result_items(Expect, Result);
    false -> 
      output_debug("sort_funcs", "length error.Expect: ~w, Result: ~w", [length(Expect), length(Result)]),
      false
  end.

-spec check_result_items(list(T), list(T)) -> true | false.
check_result_items([], []) ->
  true;
check_result_items(Expect, Result) ->
  [HExpect | TExpect] = Expect,
  [HResult | TResult] = Result,
  case compare(HExpect, HResult) of
    equal_to -> 
      check_result_items(TExpect, TResult);
    _ -> 
      false
  end.

show_check_result(Algorithm, Title, true, _, _, _) ->
  output_info(Algorithm, Title, [true]);
show_check_result(Algorithm, Title, false, Source, Expect, Result) ->
  output_info(Algorithm, Title, [false]),
  output_info(Algorithm, "Source: ~w", [Source]),
  output_info(Algorithm, "Expect: ~w", [Expect]),
  output_info(Algorithm, "Result: ~w", [Result]).

get_swap_head(L, I) ->
  lists:sublist(L, I -1).
get_swap_middle(L, I1, I2) ->
  lists:sublist(L, I1 + 1, I2 - I1 - 1).
get_swap_tail(L, I) ->
  lists:sublist(L, I + 1, length(L) - I).


get_random_list() ->
  [
    19970, 15500, 15053, 5844, 4435, 10791, 16161, 24613, 24540, 15073, 16760, 26848, 8461, 31756, 21982, 15330, 7588, 6646, 15319, 20160, 27674, 16705, 28163, 20192, 10888, 32252, 25929, 23635, 9058, 10861, 8548, 29837, 29522, 14519, 20840, 23161, 3831, 6462, 25605, 11037, 15859, 29387, 2690, 9078, 14058, 25853, 28666, 15288, 19718, 29569, 15810, 21599, 23030, 26770, 6003, 13421, 2048, 28862, 8674, 16372, 1302, 1438, 26394, 6200, 20862, 29127, 31715, 4803, 31275, 19147, 4711, 22675, 19236, 18511, 26013, 29548, 27738, 10853, 3027, 4007, 20926, 24615, 20226, 14616, 5451, 19426, 8206, 8909, 7339, 27174, 16007, 14580, 20955, 11217, 20274, 8222, 12269, 10583, 22455, 2959, 12266, 26237, 30402, 2527, 20658, 29792, 8889, 21759, 1595, 11855, 27182, 19414, 31694, 14652, 12491, 1217, 20680, 17570, 1490, 25428, 15784, 13983, 10455, 28641, 30517, 24107, 1218, 7962, 13878, 25584, 31477, 9498, 3074, 11837, 28684, 22377, 29349, 32656, 8316, 31333, 22856, 22877, 10170, 29326, 7236, 2548, 17783, 25694, 8546, 20502, 11215, 23506, 1437, 10140, 19244, 28920, 18377, 8057, 31171, 11821, 16263, 22812, 23777, 32517, 32574, 28579, 25903, 18186, 32517, 32333, 7426, 17089, 13889, 6264, 5409, 154, 12736, 29007, 19000, 22057, 24684, 9216, 12696, 10679, 24738, 28603, 1473, 32006, 16194, 10425, 10045, 13334, 12007, 3189, 166, 28165, 23694, 10716, 32052, 9945, 12890, 566, 23278, 2005, 25013, 23368, 32487, 4432, 21064, 17917, 3796, 22631, 32138, 7057, 7276, 12426, 2161, 20755, 32396, 23493, 10203, 18283, 7241, 9161, 6560, 32277, 24938, 18525, 11439, 27075, 24035, 14635, 22098, 29672, 15997, 18274, 5167, 25428, 19051, 26985, 15206, 22964, 25808, 20278, 8010, 30897, 20377, 31595, 20531, 3152, 3258, 23141, 26745, 15540, 10662, 1586, 26835, 10676, 7090, 4004, 3469, 28331, 27804, 18665, 29476, 24574, 27676, 22619, 3233, 27321, 29741, 28343, 2040, 19723, 15672, 21176, 26032, 22262, 1002, 14390, 8230, 15913, 12654, 22028, 30209, 2283, 16358, 18310, 2314, 12812, 31353, 22268, 4034, 26441, 5262, 10923, 5355, 2653, 10477, 12758, 13048, 27802, 20170, 21428, 30394, 21025, 5487, 21630, 26634, 7387, 18262, 12782, 13030, 16581, 32268, 8085, 12626, 13068, 9907, 26085, 26781, 30027, 20547, 6804, 9275, 23196, 24177, 9537, 10454, 10217, 28245, 25642, 7725, 21180, 24206, 31274, 9265, 19601, 31198, 13811, 14580, 20956, 4310, 4992, 92, 18711, 20864, 31705, 5358, 14749, 13398, 7498, 6344, 20192, 3822, 19400, 27599, 2476, 13368, 4261, 32555, 15471, 18605, 29984, 20308, 23203, 22864, 19571, 22921, 32037, 20770, 25591, 14656, 16581, 671, 14866, 6960, 7188, 10461, 29715, 15791, 18876, 8406, 6925, 6653, 26371, 14179, 1429, 8666, 10937, 10375, 29797, 24948, 21217, 23829, 22882, 25663, 5895, 381, 26133, 2646, 15459, 11030, 22447, 26108, 15751, 6873, 17961, 29660, 5993, 4543, 23916, 9739, 21514, 11635, 31752, 11195, 20914, 9412, 26074, 4677, 12804, 30911, 8529, 4438, 19600, 21709, 32675, 839, 24578, 20076, 25776, 5368, 28215, 31212, 19387, 1724, 31676, 12032, 30226, 29467, 19341, 29649, 23867, 30458, 21149, 24804, 25972, 16444, 19663, 267, 14502, 18053, 2976, 1886, 24265, 6144, 19708, 26977, 13242, 15506, 17259, 28276, 7866, 28344, 7445, 29239, 20186, 5126, 13000, 15178, 17790, 6289, 3349, 2395, 2489, 29219, 11388, 23314, 8409, 17041, 7046, 20905, 27036, 14633, 1885, 7491, 14166, 6977, 32008, 20706, 18736, 12629, 21, 4634, 17608, 24242, 12676, 122, 27173, 17192, 9937, 10907, 21668, 8778, 32414, 24112, 25407, 31926, 25913, 10698, 20829, 28951, 14830, 23696, 8880, 28912, 20218, 21117, 19875, 19556, 5223, 10345, 10877, 7743, 23079, 31814, 3543, 29251, 24638, 21325, 7004, 23199, 17179, 31950, 1123, 10887, 25521, 6142, 19425, 20570, 8422, 660, 2735, 1961, 8881, 26767, 17836, 15596, 616, 10900, 2485, 29928, 18605, 659, 12551, 31259, 20222, 15226, 250, 16536, 23390, 21494, 25057, 20903, 21818, 10894, 10106, 29110, 479, 13637, 26946, 17949, 17916, 17794, 14415, 7446, 20061, 32373, 24785, 28524, 17196, 9329, 17822, 26028, 15522, 28419, 31025, 11243, 7467, 11064, 4427, 5165, 21067, 30639, 18081, 15529, 8469, 17481, 20986, 8105, 14652, 19283, 22411, 2702, 13968, 27951, 22645, 13478, 15725, 26381, 9199, 19671, 31420, 10597, 27878, 9879, 11819, 22311, 5525, 15529, 20023, 18806, 5617, 11570, 22175, 4513, 4521, 9689, 2882, 20884, 7428, 5168, 4281, 11396, 27339, 21411, 19036, 4656, 16144, 22215, 30763, 5411, 24390, 16347, 3992, 25205, 12244, 23271, 9167, 5780, 29885, 27583, 3939, 282, 6152, 25102, 25016, 5014, 1658, 29203, 5793, 32689, 25855, 28346, 5035, 26526, 4969, 10631, 8232, 31976, 16266, 15783, 16172, 9154, 16970, 10622, 22982, 7197, 27235, 10163, 6374, 30096, 1184, 31565, 12361, 20814, 4305, 18462, 27153, 11563, 252, 22822, 11158, 9150, 22151, 22772, 17118, 21725, 8468, 18986, 17248, 5916, 23030, 19608, 15214, 3556, 13860, 7361, 31247, 19351, 886, 31934, 25152, 11786, 28076, 28106, 13218, 543, 31383, 1742, 4624, 9053, 24582, 19632, 30106, 12225, 22466, 24121, 16337, 20803, 11007, 9999, 2134, 3132, 24160, 17799, 20120, 7895, 31794, 28401, 22938, 24963, 3138, 25994, 31843, 2247, 29468, 1989, 21013, 5383, 12745, 9308, 12899, 21118, 1965, 3507, 13046, 24656, 21924, 13690, 6131, 10466, 15273, 12809, 18391, 17003, 11800, 19944, 25252, 20514, 13195, 10452, 19043, 20500, 7381, 3869, 978, 30410, 30018, 4969, 5407, 31393, 1672, 8253, 17884, 16838, 903, 23673, 24107, 30860, 21817, 27494, 12354, 32611, 31405, 18773, 10534, 18772, 27584, 20377, 25939, 31302, 15978, 31022, 4034, 10755, 1520, 21, 6686, 31824, 11075, 1525, 22098, 23648, 30429, 29487, 12563, 4559, 21890, 27511, 9489, 12675, 23621, 30213, 6314, 7499, 19403, 8431, 931, 4570, 9320, 1291, 27058, 18471, 13366, 5407, 23807, 18281, 23372, 1666, 28092, 28564, 9301, 31259, 12844, 8324, 32706, 19627, 17471, 13733, 11080, 12414, 32360, 4999, 11047, 26173, 31870, 26578, 25709, 19755, 8196, 2422, 31296, 7959, 31399, 7333, 15969, 4684, 4899, 2317, 26410, 6543, 19274, 10324, 30370, 21880, 23518, 27232, 26063, 6133, 8649, 24961, 13017, 1497, 6448, 17835, 13873, 31238, 29795, 16000, 6053, 30903, 27304, 24027, 13199, 17897, 31038, 334, 19220, 11622, 11150, 21289, 27620, 30354, 12972, 2023, 31625, 7053, 29627, 11753, 15076, 1915, 14648, 14764, 9685, 29826, 23647, 765, 30274, 16901, 2568, 15783, 27214, 20933, 3441, 16567, 32596, 16626, 11046, 27215, 9872, 3968, 23530, 14260, 19340, 4503, 30215, 26386, 5419, 26158, 31737, 19301, 6525, 9122, 2141, 20914, 7795, 19055, 26437, 1977, 12409, 30854, 18552, 1146, 12385, 22713, 14041, 11444, 6787, 27657, 4642, 20677, 878, 2040, 12, 19438, 17551, 16622, 32457, 3886, 21913, 31763, 5991, 11150, 9733, 15961, 27502, 23057, 16531, 7414, 9527, 29566, 29623, 10774, 22538, 16596, 16061, 13340, 26936, 12174, 22604, 925, 1302, 1096, 23878, 15681, 5680, 25418, 17471
  ].
get_random_sorted_list() ->
  [
    12, 21, 21, 92, 122, 154, 166, 250, 252, 267, 282, 334, 381, 479, 543, 566, 616, 659, 660, 671, 765, 839, 878, 886, 903, 925, 931, 978, 1002, 1096, 1123, 1146, 1184, 1217, 1218, 1291, 1302, 1302, 1429, 1437, 1438, 1473, 1490, 1497, 1520, 1525, 1586, 1595, 1658, 1666, 1672, 1724, 1742, 1885, 1886, 1915, 1961, 1965, 1977, 1989, 2005, 2023, 2040, 2040, 2048, 2134, 2141, 2161, 2247, 2283, 2314, 2317, 2395, 2422, 2476, 2485, 2489, 2527, 2548, 2568, 2646, 2653, 2690, 2702, 2735, 2882, 2959, 2976, 3027, 3074, 3132, 3138, 3152, 3189, 3233, 3258, 3349, 3441, 3469, 3507, 3543, 3556, 3796, 3822, 3831, 3869, 3886, 3939, 3968, 3992, 4004, 4007, 4034, 4034, 4261, 4281, 4305, 4310, 4427, 4432, 4435, 4438, 4503, 4513, 4521, 4543, 4559, 4570, 4624, 4634, 4642, 4656, 4677, 4684, 4711, 4803, 4899, 4969, 4969, 4992, 4999, 5014, 5035, 5126, 5165, 5167, 5168, 5223, 5262, 5355, 5358, 5368, 5383, 5407, 5407, 5409, 5411, 5419, 5451, 5487, 5525, 5617, 5680, 5780, 5793, 5844, 5895, 5916, 5991, 5993, 6003, 6053, 6131, 6133, 6142, 6144, 6152, 6200, 6264, 6289, 6314, 6344, 6374, 6448, 6462, 6525, 6543, 6560, 6646, 6653, 6686, 6787, 6804, 6873, 6925, 6960, 6977, 7004, 7046, 7053, 7057, 7090, 7188, 7197, 7236, 7241, 7276, 7333, 7339, 7361, 7381, 7387, 7414, 7426, 7428, 7445, 7446, 7467, 7491, 7498, 7499, 7588, 7725, 7743, 7795, 7866, 7895, 7959, 7962, 8010, 8057, 8085, 8105, 8196, 8206, 8222, 8230, 8232, 8253, 8316, 8324, 8406, 8409, 8422, 8431, 8461, 8468, 8469, 8529, 8546, 8548, 8649, 8666, 8674, 8778, 8880, 8881, 8889, 8909, 9053, 9058, 9078, 9122, 9150, 9154, 9161, 9167, 9199, 9216, 9265, 9275, 9301, 9308, 9320, 9329, 9412, 9489, 9498, 9527, 9537, 9685, 9689, 9733, 9739, 9872, 9879, 9907, 9937, 9945, 9999, 10045, 10106, 10140, 10163, 10170, 10203, 10217, 10324, 10345, 10375, 10425, 10452, 10454, 10455, 10461, 10466, 10477, 10534, 10583, 10597, 10622, 10631, 10662, 10676, 10679, 10698, 10716, 10755, 10774, 10791, 10853, 10861, 10877, 10887, 10888, 10894, 10900, 10907, 10923, 10937, 11007, 11030, 11037, 11046, 11047, 11064, 11075, 11080, 11150, 11150, 11158, 11195, 11215, 11217, 11243, 11388, 11396, 11439, 11444, 11563, 11570, 11622, 11635, 11753, 11786, 11800, 11819, 11821, 11837, 11855, 12007, 12032, 12174, 12225, 12244, 12266, 12269, 12354, 12361, 12385, 12409, 12414, 12426, 12491, 12551, 12563, 12626, 12629, 12654, 12675, 12676, 12696, 12736, 12745, 12758, 12782, 12804, 12809, 12812, 12844, 12890, 12899, 12972, 13000, 13017, 13030, 13046, 13048, 13068, 13195, 13199, 13218, 13242, 13334, 13340, 13366, 13368, 13398, 13421, 13478, 13637, 13690, 13733, 13811, 13860, 13873, 13878, 13889, 13968, 13983, 14041, 14058, 14166, 14179, 14260, 14390, 14415, 14502, 14519, 14580, 14580, 14616, 14633, 14635, 14648, 14652, 14652, 14656, 14749, 14764, 14830, 14866, 15053, 15073, 15076, 15178, 15206, 15214, 15226, 15273, 15288, 15319, 15330, 15459, 15471, 15500, 15506, 15522, 15529, 15529, 15540, 15596, 15672, 15681, 15725, 15751, 15783, 15783, 15784, 15791, 15810, 15859, 15913, 15961, 15969, 15978, 15997, 16000, 16007, 16061, 16144, 16161, 16172, 16194, 16263, 16266, 16337, 16347, 16358, 16372, 16444, 16531, 16536, 16567, 16581, 16581, 16596, 16622, 16626, 16705, 16760, 16838, 16901, 16970, 17003, 17041, 17089, 17118, 17179, 17192, 17196, 17248, 17259, 17471, 17471, 17481, 17551, 17570, 17608, 17783, 17790, 17794, 17799, 17822, 17835, 17836, 17884, 17897, 17916, 17917, 17949, 17961, 18053, 18081, 18186, 18262, 18274, 18281, 18283, 18310, 18377, 18391, 18462, 18471, 18511, 18525, 18552, 18605, 18605, 18665, 18711, 18736, 18772, 18773, 18806, 18876, 18986, 19000, 19036, 19043, 19051, 19055, 19147, 19220, 19236, 19244, 19274, 19283, 19301, 19340, 19341, 19351, 19387, 19400, 19403, 19414, 19425, 19426, 19438, 19556, 19571, 19600, 19601, 19608, 19627, 19632, 19663, 19671, 19708, 19718, 19723, 19755, 19875, 19944, 19970, 20023, 20061, 20076, 20120, 20160, 20170, 20186, 20192, 20192, 20218, 20222, 20226, 20274, 20278, 20308, 20377, 20377, 20500, 20502, 20514, 20531, 20547, 20570, 20658, 20677, 20680, 20706, 20755, 20770, 20803, 20814, 20829, 20840, 20862, 20864, 20884, 20903, 20905, 20914, 20914, 20926, 20933, 20955, 20956, 20986, 21013, 21025, 21064, 21067, 21117, 21118, 21149, 21176, 21180, 21217, 21289, 21325, 21411, 21428, 21494, 21514, 21599, 21630, 21668, 21709, 21725, 21759, 21817, 21818, 21880, 21890, 21913, 21924, 21982, 22028, 22057, 22098, 22098, 22151, 22175, 22215, 22262, 22268, 22311, 22377, 22411, 22447, 22455, 22466, 22538, 22604, 22619, 22631, 22645, 22675, 22713, 22772, 22812, 22822, 22856, 22864, 22877, 22882, 22921, 22938, 22964, 22982, 23030, 23030, 23057, 23079, 23141, 23161, 23196, 23199, 23203, 23271, 23278, 23314, 23368, 23372, 23390, 23493, 23506, 23518, 23530, 23621, 23635, 23647, 23648, 23673, 23694, 23696, 23777, 23807, 23829, 23867, 23878, 23916, 24027, 24035, 24107, 24107, 24112, 24121, 24160, 24177, 24206, 24242, 24265, 24390, 24540, 24574, 24578, 24582, 24613, 24615, 24638, 24656, 24684, 24738, 24785, 24804, 24938, 24948, 24961, 24963, 25013, 25016, 25057, 25102, 25152, 25205, 25252, 25407, 25418, 25428, 25428, 25521, 25584, 25591, 25605, 25642, 25663, 25694, 25709, 25776, 25808, 25853, 25855, 25903, 25913, 25929, 25939, 25972, 25994, 26013, 26028, 26032, 26063, 26074, 26085, 26108, 26133, 26158, 26173, 26237, 26371, 26381, 26386, 26394, 26410, 26437, 26441, 26526, 26578, 26634, 26745, 26767, 26770, 26781, 26835, 26848, 26936, 26946, 26977, 26985, 27036, 27058, 27075, 27153, 27173, 27174, 27182, 27214, 27215, 27232, 27235, 27304, 27321, 27339, 27494, 27502, 27511, 27583, 27584, 27599, 27620, 27657, 27674, 27676, 27738, 27802, 27804, 27878, 27951, 28076, 28092, 28106, 28163, 28165, 28215, 28245, 28276, 28331, 28343, 28344, 28346, 28401, 28419, 28524, 28564, 28579, 28603, 28641, 28666, 28684, 28862, 28912, 28920, 28951, 29007, 29110, 29127, 29203, 29219, 29239, 29251, 29326, 29349, 29387, 29467, 29468, 29476, 29487, 29522, 29548, 29566, 29569, 29623, 29627, 29649, 29660, 29672, 29715, 29741, 29792, 29795, 29797, 29826, 29837, 29885, 29928, 29984, 30018, 30027, 30096, 30106, 30209, 30213, 30215, 30226, 30274, 30354, 30370, 30394, 30402, 30410, 30429, 30458, 30517, 30639, 30763, 30854, 30860, 30897, 30903, 30911, 31022, 31025, 31038, 31171, 31198, 31212, 31238, 31247, 31259, 31259, 31274, 31275, 31296, 31302, 31333, 31353, 31383, 31393, 31399, 31405, 31420, 31477, 31565, 31595, 31625, 31676, 31694, 31705, 31715, 31737, 31752, 31756, 31763, 31794, 31814, 31824, 31843, 31870, 31926, 31934, 31950, 31976, 32006, 32008, 32037, 32052, 32138, 32252, 32268, 32277, 32333, 32360, 32373, 32396, 32414, 32457, 32487, 32517, 32517, 32555, 32574, 32596, 32611, 32656, 32675, 32689, 32706
  ].

get_uniq_value_list() ->
  get_uniq_value_list(200).
get_uniq_value_list(1) -> [200];
get_uniq_value_list(N) ->
  lists:append([200], get_uniq_value_list(N - 1)).
